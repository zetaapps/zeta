apply plugin: 'com.android.application'
apply plugin: 'com.fernandocejas.frodo'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        applicationId "zeta.android.apps"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        vectorDrawables.useSupportLibrary = true
        versionCode 3
        versionName "1.0.3"
        multiDexEnabled false

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
            }
        }
    }

    splits {
        abi {
            enable project.hasProperty('splitApks')
            reset()
            include 'x86', 'armeabi', 'armeabi-v7a'
            universalApk = true
        }
    }

    buildTypes {

        automation.initWith(buildTypes.debug)
        automation {
            applicationIdSuffix ".automation"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            zipAlignEnabled
            shrinkResources true
            debuggable false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Specifies a flavor dimension.
    flavorDimensions "release"

    productFlavors {

        free {
            applicationIdSuffix ".free"
            versionCode 3
            versionName "1.0.3.1"
            dimension "release"
        }

        paid {
            applicationIdSuffix ".paid"
            versionCode 3
            versionName "1.0.3.2"
            dimension "release"
        }
    }

    testBuildType "automation"

    lintOptions {
        warningsAsErrors false
        abortOnError true

        //App does not have deep linking.
        disable 'GoogleAppIndexingWarning'
        //Okio references java.nio that does not presented in Android SDK.
        disable 'InvalidPackage'

        xmlReport false
        htmlReport true
        lintConfig file("${project.rootDir}/config/lint/lint.xml")
        htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
        xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        // Unit tests for debug build type specific code live in src/debugTest.
        testDebug.java.srcDir 'src/debugTest/java'
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/MANIFEST.MF'

        exclude 'META-INF/rxjava.properties'

        exclude 'build-data.properties'

        exclude 'com/sun/jna/aix-ppc/libjnidispatch.a'
        exclude 'com/sun/jna/darwin/libjnidispatch.jnilib'
        exclude 'com/sun/jna/win32-x86-64/jnidispatch.dll'
        exclude 'com/sun/jna/win32-x86/jnidispatch.dll'
        exclude 'com/sun/jna/win32ce-arm/jnidispatch.dll'
        exclude 'com/sun/jna/w32ce-arm/jnidispatch.dll'
        exclude 'jsr305_annotations/Jsr305_annotations.gwt.xml'

        exclude 'fabric/io.fabric.sdk.android.fabric.properties'
        exclude 'fabric/com.crashlytics.sdk.android.crashlytics-core.properties'
        exclude 'fabric/com.crashlytics.sdk.android.crashlytics.properties'
        exclude 'fabric/com.crashlytics.sdk.android.answers.properties'
        exclude 'fabric/com.crashlytics.sdk.android.beta.properties'
        exclude 'fabric/io.branch.sdk.android.library.properties'

        exclude 'com/sun/jna/aix-ppc/libjnidispatch.a'
        exclude 'com/sun/jna/darwin/libjnidispatch.jnilib'
        exclude 'com/sun/jna/win32-x86-64/jnidispatch.dll'
        exclude 'com/sun/jna/win32-x86/jnidispatch.dll'
        exclude 'com/sun/jna/win32ce-arm/jnidispatch.dll'
        exclude 'com/sun/jna/w32ce-arm/jnidispatch.dll'

        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // This allows us see tests execution progress in the output on the CI.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
        //Print the test result summary
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Myntra Test Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //PLAY SERVICES
    implementation libraries.playServicesAd
    implementation libraries.playServicesGcm
    implementation libraries.playServicesMaps
    implementation libraries.playServicesLocation

    //SUPPORT LIBS
    implementation libraries.supportV13
    implementation libraries.supportDesign
    implementation libraries.supportCardView
    implementation libraries.supportMultiDex
    implementation libraries.supportAppCompat
    implementation libraries.supportRecyclerView

    implementation libraries.eventBus
    implementation libraries.butterKnife
    annotationProcessor libraries.butterKnifeCompiler

    //IMAGE PROCESSING
    implementation libraries.glide
    implementation(libraries.glideOkHttp) {
        exclude group: 'glide-parent'
    }

    implementation(libraries.bundler) {
        // exclude this because bundler refers to an old version of the support lib
        exclude group: 'com.google.android'
    }

    //ANNOTATION
    implementation libraries.jsr305
    implementation libraries.javaxAnnotationApi

    //NETWORK
    implementation libraries.okHttp3
    implementation libraries.okHttp3LogInterceptor
    implementation libraries.retrofit
    implementation libraries.retrofitGsonConverter

    //PROGRAMMING
    implementation libraries.rxJava
    implementation libraries.rxAndroid

    implementation libraries.dagger
    annotationProcessor libraries.daggerCompiler

    implementation libraries.daggerAndroid
    implementation libraries.daggerAndroidSupport
    annotationProcessor libraries.daggerAndroidProcessor

    compileOnly libraries.autoValueJakeWharton
    annotationProcessor libraries.autoValue
    annotationProcessor libraries.autoValueParcel

    //Zeta
    implementation libraries.zetaUtils
    implementation libraries.zetaEither
    implementation libraries.zetaListItemDivider
    implementation libraries.zetaHeaderAndFooterAdapters

    //DEVELOPER TOOLS
    implementation libraries.timber
    debugImplementation libraries.lynx
    debugImplementation(libraries.stetho) {
        exclude module: 'jsr305'
    }

    debugImplementation libraries.tinyDancer
    debugImplementation libraries.leakcanary
    releaseImplementation libraries.leakcanaryNoOp
    automationImplementation libraries.leakcanaryNoOp

    //TESTING
    testImplementation libraries.junit
    testImplementation libraries.assertJ
    testImplementation libraries.mockitoCore
    testImplementation libraries.robolectric
    testImplementation libraries.equalsVerifier
    testImplementation libraries.okHttpMockWebServer

    androidTestImplementation libraries.dexmaker
    androidTestImplementation(libraries.espressoCore) {
        exclude module: 'jsr305'
    }
    androidTestImplementation libraries.dexmakerMockito
    androidTestImplementation libraries.supportTestRules
    androidTestImplementation libraries.supportTestRunner
    androidTestImplementation(libraries.espressoContrib) {
        // Causes IncompatibleClassChangeError. As alwaysâ€¦
        exclude module: 'jsr305'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
    }
}

configurations.all {
    resolutionStrategy {
        // Force our version of support-annotations, we have a conflict between app and androidTest dependency resolution.
        force libraries.supportAnnotations
    }
}

